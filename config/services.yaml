# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'de'
    geoip.database: '/usr/share/GeoIP/GeoLite2-Country.mmdb'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,Request,Repository,Command/Dev}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Request\ParamConverter\DatatablesRequestParamConverter:
        tags: ['request.param_converter']

    GuzzleHttp\Client:
        arguments:
            - connect_timeout: 60
              timeout: 1800

    GuzzleHttp\ClientInterface:
        alias: 'GuzzleHttp\Client'

    App\ArchLinux\PackageDatabaseMirror:
        bind:
            $mirrorUrl: '%app.packages.mirror%'

    App\Service\RepositoryManager:
        bind:
            $repositoryConfiguration: '%app.packages.repositories%'

    MaxMind\Db\Reader:
        arguments:
            - '%geoip.database%'

    League\ISO3166\ISO3166:

    FeedIo\Adapter\Guzzle\Client:

    FeedIo\FeedIo:
        bind:
            $client: '@FeedIo\Adapter\Guzzle\Client'

    App\Service\MirrorFetcher:
        $mirrorStatusUrl: '%app.mirrors.status%'

    App\Service\ReleaseFetcher:
        $releaseUrl: '%app.releng.releases%'

    App\Service\NewsItemFetcher:
        $newsFeedUrl: '%app.news.feed%'

    App\Repository\RepositoryRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments: ['\App\Entity\Packages\Repository']

    App\Repository\PackageRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments: ['\App\Entity\Packages\Package']

    App\Repository\FilesRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments: ['\App\Entity\Packages\Files']

    App\Repository\AbstractRelationRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments: ['\App\Entity\Packages\Relations\AbstractRelation']

    App\Repository\MirrorRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments: ['\App\Entity\Mirror']

    App\Repository\NewsItemRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments: ['\App\Entity\NewsItem']

    App\Repository\ReleaseRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments: ['\App\Entity\Release']

    App\Repository\CountryRepository:
        factory: 'Doctrine\ORM\EntityManagerInterface:getRepository'
        arguments: ['\App\Entity\Country']
